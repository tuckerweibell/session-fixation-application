<% unless current_user %>
  <div class="mt-5 text-center">
  <div class="d-flex justify-content-center">
    <%= link_to 'Login', login_path, class: 'btn btn-primary btn-lg me-3' %>
    <%= link_to 'Sign Up', new_user_path, class: 'btn btn-light btn-outline-dark btn-lg' %>
    <%= link_to 'XSS Search', "#{request.path}?search=<script>alert('XSS_INJECTION_PARAM')</script>", class: 'btn btn-danger btn-lg ms-3' %>
    <button type="button" class="btn btn-info btn-lg ms-3" data-bs-toggle="modal" data-bs-target="#exampleModal">
      Generate Payload
    </button>
    <button type="button" class="btn btn-warning btn-lg ms-3" onclick="clearCookies()">
      Reset Cookies
    </button>
  </div>
  <center>
  <div class="mt-5">
    <h1>Instructions</h1><hr style="width: 70%">
    <p>1. Open a seperate incognito window.</p>
    <p>2. Confirm the session IDs are different on both windows.</p>
    <p>3. On one of the window, generate a xss payload.</p>
    <p>4. Use the xss payload in the search parameter on the other windows.</p>
    <p>5. Notice now both session IDs are the same.</p>
    <p>6. Login in to one of the windows and refresh the other window.</p>
    <p>7. Notice you are now logged in on both windows.</p>
  </div>
  <div class="mt-5 " style="width: 70%">
    <h1 class="text-danger">Lessons Learned</h1>
    <hr style="width: 70%">
    <p>1. Use HttpOnly cookies.</p>
    <p>2. Donâ€™t roll your own authentication. Use Devise.</p>
    <p>3. Call <code>reset_session</code> before associating a user. Clean slates matter.</p>
    <p>4. Call <code>reset_session</code> after disassociating a user. Once theyâ€™re out, keep them out.</p>
  </div>
  </center>

</div>
<% else %>
  <div class="container">
    <div class="alert alert-success mt-3 mx-auto text-center" style="max-width: 85%;" role="alert">
      <h4 class="alert-heading">You are logged in!</h4>
      <p class="mb-0">Logged in as: <strong><%= current_user.email %></strong></p>
      <hr>
      <%= button_to 'Sign Out', logout_path, method: :get, class: 'btn btn-danger mt-3' %>
    </div>
  </div>
<% end %>

<div class="modal fade text-dark" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-1" id="exampleModalLabel">XSS Set Victim Session Payload</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <div class="container mt-3">
          <h4>Payload Information</h4>
          <p>
            This payload was generated by obtaining the value of your unauthenticated <strong>url encoded</strong> session cookie and base64 encoding it.
          </p>
          <p>
            The payload will decode the session cookie and set it as the session cookie in the victim's browser. After successful execution, both the victim and the attacker will be using the same session ID. When the victim logs in, the attacker will also be logged in. This is because the application stores session IDs as a user attribute in the database when a user logs in. For subsequent requests, the application retrieves the session ID from the session cookie and looks for the associated user in the database to authenticate them to resources.
          </p>

          <h4>Generating the Base64 Encoded Cookie</h4>
          <p>
            The base64 encoded cookie can be generated manually on a Unix system as follows:
          </p>
          <ol>
            <li>Copy the url encoded session cookie from the attacker's browser (unauthenticated).</li>
            <li>Run the following command:</li>
          </ol>
          <pre>
            <code>echo -n "ATTACKER_SESSION_COOKIE" | base64</code>
          </pre>
          <h4>Generated Payload ðŸ˜ˆ</h4>
          <p>
            Get this to execute on the victims browser via the vulnerable search parameter.
          </p>
        </div>
      <div class="modal-body d-flex align-items-center">
        <pre class="overflow-auto" style="white-space: nowrap; max-width: 100%; margin: 0; padding: 10px; background-color: #f8f9fa; border: 1px solid #ced4da; border-radius: 4px;">
          <code style="white-space: nowrap; display: inline;">
            <%= "<script>document.cookie = `_session_fixation_application_session=${(atob(\"#{Base64.strict_encode64(ERB::Util.url_encode(cookies[:_session_fixation_application_session]))}\"))};`;</script>" %>
          </code>
        </pre>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="copyButton">Copy</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.getElementById('copyButton').onclick = function() {
    const textToCopy = document.querySelector('.modal-body code').innerText.trim(); // Get the code text
    navigator.clipboard.writeText(textToCopy) // Copy to clipboard
      .then(() => {
        alert('Text copied to clipboard!'); // Success message
      })
      .catch(err => {
        console.error('Error copying text: ', err);
      });
  };

  function clearCookies() {
    const cookies = document.cookie.split(";"); // Get all cookies

    for (let cookie of cookies) {
      const eqPos = cookie.indexOf("=");
      const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;

      // Set cookie with an expiration date in the past
      document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/";
    }
    location.reload();
  }
</script>




